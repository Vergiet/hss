@page "/fetchdata"

@using Ui.Data
@using System.Text
@using System.Threading
@using Azure.Messaging.EventHubs.Consumer
@using System.Text.Json


<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>
@if (stringb == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>Day</th>
            <th>AVG</th>
            <th>MIN</th>
            <th>MAX</th>
            <th>STDEVP</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in stringb)
            {
                <tr>
                    <td>@forecast.Day</td>
                    <td>@forecast.AVG</td>
                    <td>@forecast.MIN</td>
                    <td>@forecast.MAX</td>
                    <td>@forecast.STDEVP</td>
                </tr>
            }
        </tbody>
    </table>
}
@if (stringc == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>@stringc</p>
}




@functions {
    private List<AggregatedForecast> stringb;
    private string stringc;

    protected override async Task OnInitializedAsync()
    //async Task BuildUrl()
    {
        AggregatedForecastService.GetForecastAsync();
        await Task.Delay(1000);
        //stringb = AggregatedForecastService.stringa;
        if (AggregatedForecastService.stringa != null){
            stringb = JsonSerializer.Deserialize<List<AggregatedForecast>>(AggregatedForecastService.stringa);
        }
        
        
        stringc = await Task.FromResult("Hello");

    }
}

@code {
    //private AggregatedForecast[] forecasts;
    // private List<AggregatedForecast> forecasts;

    /*


        <button class="btn btn-primary" @onclick="@BuildUrl">Get events</button>

    protected override async void OnInitializedAsync()
        {
        return await AggregatedForecastService.GetForecastAsync();
        }
        */

    /*
    @inject AggregatedForecastService ForecastService
    @if (forecasts == null)
        {
        <p><em>Loading...</em></p>
        }
        else
        {
        <table class="table">
        <thead>
        <tr>
        <th>Day</th>
        <th>AVG</th>
        <th>MIN</th>
        <th>MAX</th>
        <th>STDEVP</th>
        </tr>
        </thead>
        <tbody>
    @foreach (var forecast in forecasts)
        {
        <tr>
        <td>@forecast.Day</td>
        <td>@forecast.AVG</td>
        <td>@forecast.MIN</td>
        <td>@forecast.MAX</td>
        <td>@forecast.STDEVP</td>
        </tr>
        }
        </tbody>
        </table>
        }
    protected override async void OnInitializedAsync()
        {


    forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    //resetEvent.Set(); // Allow the program to exit

        }
        */
    //private WeatherForecast[] forecasts;

    /*
    protected override async Task OnInitializedAsync()
        {
    forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        }
        */
}
