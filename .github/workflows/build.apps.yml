name: build

on:
  push:
    branches: ["hello-world"]
  pull_request:
    branches: [master]

jobs:
  versioning:
    runs-on: ubuntu-20.04

    steps:
      - uses: paulhatch/semantic-version@v3.3
        with:
          # The prefix to use to identify tags
          branch: "hello-world"
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}-prerelease${increment}"
          # Indicate whether short tags like 'v1' should be supported. If false only full
          # tags like 'v1.0.0' will be recognized.
          short_tags: false
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false

  build:
    #runs-on: ubuntu-latest
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        apps: ["ui", "backend", "forecastgenerator"]

    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Github CR
        uses: docker/login-action@v1
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_WRITETOKEN }}
          registry: ghcr.io
      - name: Build and push ${{ matrix.apps }}
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.apps }}/.
          file: ./${{ matrix.apps }}/dockerfile
          push: true
          tags: ghcr.io/vergiet/${{ matrix.apps }}:latest, ghcr.io/vergiet/${{ matrix.apps }}:0.1.10

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v2
      - name: Helm tool installer
        uses: Azure/setup-helm@v1
        with:
          version: latest #v3.3.1
      - uses: azure/aks-set-context@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"
          cluster-name: "aks-temp"
          resource-group: "aks-temp"
      - name: Run Helm Deploy
        run: |
          helm upgrade \
            --install \
            --create-namespace \
            --atomic \
            --wait \
            --namespace staging \
            contoso-website \
            ./.kubernetes/contoso-website \
            --set image.repository=${{ secrets.ACR_NAME }} \
            --set dns.name=${{ secrets.DNS_NAME }}

  run-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging

    steps:
      - name: Run Tests
        run: echo 'run tests'

  cleanup-staging:
    runs-on: ubuntu-latest
    needs: run-tests

    steps:
      - uses: actions/checkout@v2
      - name: Helm tool installer
        uses: Azure/setup-helm@v1
        with:
          version: latest #v3.3.1
      - uses: azure/aks-set-context@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"
          cluster-name: "aks-temp"
          resource-group: "aks-temp"
      - name: Run Helm Delete
        run: |
          helm delete --namespace staging contoso-website

  deploy-production:
    runs-on: ubuntu-latest
    needs: cleanup-staging

    steps:
      - uses: actions/checkout@v2

      - name: Helm tool installer
        uses: Azure/setup-helm@v1
        with:
          version: latest #v3.3.1
      - uses: azure/aks-set-context@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"
          cluster-name: "aks-temp"
          resource-group: "aks-temp"
      - name: Run Helm Deploy
        run: |
          helm upgrade \
            --install \
            --create-namespace \
            --atomic \
            --wait \
            --namespace production \
            contoso-website \
            ./.kubernetes/contoso-website \
            --set image.repository=${{ secrets.ACR_NAME }} \
            --set dns.name=${{ secrets.DNS_NAME }}
